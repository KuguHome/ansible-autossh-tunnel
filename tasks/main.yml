- name: create autossh user
  when:
  - autossh_onlineconf
  - autossh_createuser
  become: true
  user:
    name: "{{ autossh_username }}"
    system: true
    append: true
    shell: /bin/false
- name: remove old keyfiles (will get regenerated below)
  become: "{{ autossh_inthenameof }}"
  when: autossh_refresh_key | bool
  with_items:
  - "{{ autossh_path }}/id_ed25519"
  - "{{ autossh_path }}/id_ed25519.pub"
  file:
    path: "{{ item }}"
    state: absent
- name: generate autossh key
  tags: getkey
  become: "{{ autossh_inthenameof }}"
  user:
    name: "{{ autossh_onlineconf | ternary(autossh_username,ansible_user_id) }}"
    generate_ssh_key: true
    ssh_key_type: ED25519
    ssh_key_file: "{{ autossh_path }}/id_{{ autossh_keyname }}"
    ssh_key_comment: "{{ autossh_keycomment }}"
  register: userresults
- name: copy locally existing public key to .old
  tags: getkey
  vars:
    oldkey: "{{ lookup('file', autossh_keyfetch_destination, errors='ignore') | default('') }}"
  when: (oldkey | default('', true) | trim != '') and userresults.ssh_public_key != oldkey
  delegate_to: localhost
  copy:
    content: "{{ oldkey }}"
    dest: "{{ autossh_keyfetch_destination }}.old"
- name: store public key locally
  tags: getkey
  delegate_to: localhost
  copy:
    content: "{{ userresults.ssh_public_key }}\n"
    dest: "{{ autossh_keyfetch_destination }}"
- name: set .ssh/ directory recursively
  become: "{{ autossh_inthenameof }}"
  file:
    path: "{{ autossh_path }}"
    owner: "{{ autossh_owner }}"
    group: "{{ autossh_owner }}"
    mode: "{{ autossh_sshdir_modestring }}"
    state: directory
    recurse: true

- name: install autossh
  when: autossh_onlineconf
  become: true
  package:
    name: autossh
- name: Show which ports to forward
  tags: portforward
  debug:
      msg: "{{ autossh_remoteforwards }}"
- name: Record remoteforwards as custom stat (set show_custom_stats in ansible.cfg or ANSIBLE_SHOW_CUSTOM_STATS=yes in env)
  set_stats:
    per_host: yes
    data:
      remoteforwards: "{{ autossh_remoteforwards }}"
- name: deploy systemd unit for autossh tunnels
  tags: systemd
  become: true
  template:
    src: "{{ autossh_unit_template }}"
    dest: "{{ autossh_path_prefix }}/etc/systemd/system/{{ autossh_unit_name }}.service"
  notify: restart autossh
- name: deploy ssh config to autossh user
  tags: portforward
  when:
  - autossh_sshconfig_template_deploy
  become: "{{ autossh_inthenameof }}"
  template:
    src:  "{{ autossh_sshconfig_template }}"
    dest: "{{ autossh_path }}/config"
    owner: "{{ autossh_owner }}"
  notify: restart autossh

- name: add known host
  become: "{{ autossh_inthenameof }}"
  loop: "{{ autossh_login_hostkeys }}"
  known_hosts:
    name: "{{ autossh_login_hostkey_host }}"
    hash_host: "{{ autossh_login_hostkey_hash }}"
    key: "{{ item }}"
    path: "{{ autossh_path }}/known_hosts"
  notify: restart autossh

- name: set .ssh/ directory recursively
  become: "{{ autossh_inthenameof }}"
  file:
    path: "{{ autossh_path }}"
    owner: "{{ autossh_owner }}"
    group: "{{ autossh_owner }}"
    mode: "{{ autossh_sshdir_modestring }}"
    state: directory
    recurse: true

- name: Enable autossh tunnels systemd unit
  when: not autossh_onlineconf
  become: true
  file:
    path: "{{ autossh_path_prefix }}/etc/systemd/system/multi-user.target.wants/{{ autossh_unit_name }}.service"
    src: "{{ autossh_path_prefix }}/etc/systemd/system/{{ autossh_unit_name }}.service"
    state: link

- name: Enable and start autossh tunnels systemd unit
  when: autossh_onlineconf
  become: true
  systemd:
    name: "{{ autossh_unit_name }}.service"
    enabled: true
    state: started
